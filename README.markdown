# ü©∫ Health Data Monitoring System

Welcome to the **Health Data Monitoring System**, a Python-based application designed to generate, analyze, and store realistic health data. This system leverages the **DeepSeek API** for medical evaluations and a **MySQL database** for data storage. A sleek **Flask-based web interface** allows users to visualize patient data, while an automation script simplifies running all components. üöÄ

---

## üìã Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Requirements](#requirements)
- [Setup](#setup)
- [Usage](#usage)
- [File Structure](#file-structure)
- [Logging](#logging)
- [Troubleshooting](#troubleshooting)
- [Contributing](#contributing)

---

## üåü Overview

The Health Data Monitoring System is built to simulate and analyze vital signs such as pulse rate, oxygen saturation, respiration rate, temperature, and ECG rhythm. It consists of three core scripts:

- **üîç `health_monitor.py`**: Generates realistic health data, sends it to the DeepSeek API for medical analysis, and stores results in a MySQL database.
- **üåê `health_data_webui.py`**: Provides a Flask-based web interface to view patient data and manage the database.
- **‚öôÔ∏è `run_all.py`**: Automates the startup of the Ollama server, `health_monitor.py`, and `health_data_webui.py`.

> **Note**: All operations and errors are logged to rotating files and the console for easy monitoring.

---

## ‚ú® Features

- **üìä Data Generation**: Simulates realistic vital signs:
  - Pulse rate: 60‚Äì100 bpm
  - Oxygen saturation: 95‚Äì100%
  - Respiration rate: 12‚Äì20 bpm
  - Temperature: 36‚Äì37.5¬∞C
  - ECG rhythm: Various types (e.g., Normal Sinus Rhythm, Atrial Fibrillation)
- **üß† DeepSeek API Integration**: Sends vital signs for medical analysis.
- **üíæ MySQL Storage**: Stores patient data and analysis results securely.
- **üñ•Ô∏è Web Interface**: Displays data in a user-friendly table and allows table deletion.
- **ü§ñ Automation**: Simplifies execution with `run_all.py`.
- **üìú Logging**: Tracks operations and errors with rotating log files.
- **üõ°Ô∏è Error Handling**: Robust handling for API, database, and web requests.

---

## üì¶ Requirements

To run the system, ensure you have:

- **Python 3.6+**
- **MySQL database**
- **DeepSeek API** running locally at `http://localhost:11434/v1/chat/completions`
- **Python Libraries**:
  - `requests`
  - `mysql-connector-python`
  - `flask`
- **Configuration File**: A `config.py` file with the following structure:

  ```python
  DB_HOST = "your_host"       # e.g., "localhost"
  DB_USER = "your_user"       # e.g., "root"
  DB_PASSWORD = "your_password"
  DB_NAME = "health_data"
  DEBUG = True                # Set to False for production
  HOST = "0.0.0.0"            # Flask host
  PORT = 5000                 # Flask port
  ```

---

## üõ†Ô∏è Setup

Follow these steps to set up the system:

1. **Install Python Dependencies** üì•

   Install the required libraries using pip:

   ```bash
   pip install requests mysql-connector-python flask
   ```

2. **Set Up the MySQL Database** üóÑÔ∏è

   - Connect to your MySQL server using a client (e.g., MySQL Workbench, phpMyAdmin, or command line).
   - Create the `health_data` database and `patient_data` table with the following SQL commands:

     ```sql
     CREATE DATABASE IF NOT EXISTS health_data;
     USE health_data;
     CREATE TABLE IF NOT EXISTS patient_data (
         id INT AUTO_INCREMENT PRIMARY KEY,
         patient_id VARCHAR(10),
         time DATETIME,
         pulse_rate INT,
         oxygen_saturation FLOAT,
         respiration_rate INT,
         temperature FLOAT,
         ecg_rhythm VARCHAR(50),
         health_status TEXT,
         a0_value INT,
         current_bpm INT
     );
     ```

   - Grant permissions to the MySQL user specified in `config.py`:

     ```sql
     GRANT ALL PRIVILEGES ON health_data.* TO 'your_user'@'localhost' IDENTIFIED BY 'your_password';
     FLUSH PRIVILEGES;
     ```

     Replace `'your_user'` and `'your_password'` with the values from `config.py`.

   - Update `config.py` with your MySQL credentials and Flask settings, ensuring `DB_NAME` is set to `"health_data"`.

3. **Install Ollama** üñ•Ô∏è

   - Download and install Ollama from [Ollama's official website](https://ollama.com/download).
   - **Windows**: Run the installer and follow the prompts.
   - **macOS**: Use Homebrew (`brew install ollama`) or download the installer.
   - **Linux**: Run the installation script:

     ```bash
     curl -fsSL https://ollama.com/install.sh | sh
     ```

   - Verify installation:

     ```bash
     ollama --version
     ```

4. **Set Up DeepSeek R1** ü§ñ

   - Ollama supports DeepSeek R1 models ranging from 1.5B to 671B parameters. The 671B model is the original, while smaller models are distilled versions based on Qwen and Llama architectures.
   - Pull a model suitable for your hardware (replace `X` with `1.5b`, `7b`, `8b`, `14b`, `32b`, `70b`, or `671b`):

     ```bash
     ollama pull deepseek-r1:Xb
     ```

     Example for the 7B model:

     ```bash
     ollama pull deepseek-r1:7b
     ```

   - Start the Ollama server:

     ```bash
     ollama serve
     ```

     This runs the server at `http://localhost:11434` for API requests.

---

## üöÄ Usage

### 1. **Run the Entire System**

Use `run_all.py` to start all components at once:

```bash
python run_all.py
```

This script:
- Launches the Ollama server (`http://localhost:11434`).
- Runs `health_monitor.py` to generate and process health data.
- Starts `health_data_webui.py` for the web interface.
- Stops all processes when complete (press `Ctrl+C`).

### 2. **Access the Web Interface** üåê

- Open your browser and navigate to `http://localhost:5000` (or the configured host/port).
- Features:
  - View patient data in a table.
  - Delete the `patient_data` table (redirects to the main page after deletion).

### 3. **Manual Execution (Optional)**

Run components individually:

- Start the Ollama server:

  ```bash
  ollama serve
  ```

- Run the data generation script:

  ```bash
  python health_monitor.py
  ```

- Run the web interface:

  ```bash
  python health_data_webui.py
  ```

- Stop each process with `Ctrl+C`.

---

## üìÇ File Structure

- **`health_monitor.py`**: Generates health data, performs API analysis, and stores results.
- **`health_data_webui.py`**: Flask-based web interface for data visualization and database management.
- **`run_all.py`**: Automates execution of all components.
- **`config.py`**: Stores database and Flask configurations.
- **`health_data.log`**: Logs for `health_monitor.py` (1MB max, 5 backups).
- **`app.log`**: Logs for `health_data_webui.py` (1MB max, 5 backups).
- **`templates/`**: Contains HTML templates (`index.html`, `error.html`) for the Flask interface.

---

## üìú Logging

- **For `health_monitor.py`**:
  - Logs are saved to `health_data.log` with a 1MB limit and 5 backup files.
- **For `health_data_webui.py`**:
  - Logs are saved to `app.log` with a 1MB limit and 5 backup files.
- Logs are also displayed on the console for real-time monitoring.
- Log format: `%(asctime)s - %(name)s - %(levelname)s - %(message)s`.

---

## üõ†Ô∏è Troubleshooting

> **Tip**: Check log files (`health_data.log` and `app.log`) for detailed error messages.

- **Database Errors**:
  - Verify `config.py` credentials.
  - Ensure the MySQL server is running and the `health_data` database and `patient_data` table exist.
  - Common MySQL errors:
    - `1045`: Incorrect username or password.
    - `1049`: Database does not exist (run `CREATE DATABASE`).
    - `1146`: Table does not exist (run `CREATE TABLE`).
- **API Errors**:
  - Confirm the Ollama server is running at `http://localhost:11434`.
  - Check if the DeepSeek R1 model is downloaded (`ollama list`).
- **Web Interface Errors**:
  - Ensure the Flask server is running (`run_all.py` or `python health_data_webui.py`).
  - Verify `config.py` host/port settings and firewall permissions.
  - Check for `index.html` and `error.html` in the `templates/` directory.
- **Ollama Server Errors**:
  - Check if port `11434` is in use:

    ```bash
    netstat -an | grep 11434
    ```

  - Verify Ollama installation (`ollama --version`) and model availability.

---

## ü§ù Contributing

We welcome contributions! To contribute:

1. Fork the repository.
2. Create a feature branch (`git checkout -b feature-name`).
3. Commit your changes (`git commit -m "Add feature"`).
4. Push to the branch (`git push origin feature-name`).
5. Open a pull request.

---

# ü©∫ Saƒülƒ±k Verileri ƒ∞zleme Sistemi

**Saƒülƒ±k Verileri ƒ∞zleme Sistemi**, ger√ßek√ßi saƒülƒ±k verileri √ºreten, **DeepSeek API** ile analiz eden ve sonu√ßlarƒ± **MySQL veritabanƒ±nda** saklayan Python tabanlƒ± bir uygulamadƒ±r. Nabƒ±z, oksijen doygunluƒüu, solunum hƒ±zƒ±, sƒ±caklƒ±k ve EKG ritmi gibi hayati bulgularƒ± izlemek i√ßin tasarlanmƒ±≈ütƒ±r. **Flask tabanlƒ± web aray√ºz√º**, verileri g√∂rselle≈ütirir ve veritabanƒ±nƒ± y√∂netir; bir yardƒ±mcƒ± betik ise t√ºm bile≈üenleri otomatikle≈ütirir. üöÄ

---

## üìã ƒ∞√ßindekiler

- [Genel Bakƒ±≈ü](#genel-bakƒ±≈ü)
- [√ñzellikler](#√∂zellikler)
- [Gereksinimler](#gereksinimler)
- [Kurulum](#kurulum)
- [Kullanƒ±m](#kullanƒ±m)
- [Dosya Yapƒ±sƒ±](#dosya-yapƒ±sƒ±)
- [G√ºnl√ºk Kaydƒ±](#g√ºnl√ºk-kaydƒ±)
- [Sorun Giderme](#sorun-giderme)
- [Katkƒ±da Bulunma](#katkƒ±da-bulunma)

---

## üåü Genel Bakƒ±≈ü

Bu sistem, a≈üaƒüƒ±daki √º√ß ana betikten olu≈üur:

- **üîç `health_monitor.py`**: Ger√ßek√ßi saƒülƒ±k verileri √ºretir, DeepSeek API ile analiz eder ve sonu√ßlarƒ± MySQL veritabanƒ±na kaydeder.
- **üåê `health_data_webui.py`**: Hasta verilerini g√∂r√ºnt√ºlemek ve veritabanƒ±nƒ± y√∂netmek i√ßin Flask tabanlƒ± bir web aray√ºz√º saƒülar.
- **‚öôÔ∏è `run_all.py`**: Ollama sunucusu, `health_monitor.py` ve `health_data_webui.py` betiklerini tek komutla √ßalƒ±≈ütƒ±rƒ±r.

> **Not**: T√ºm i≈ülemler ve hatalar, kolay izleme i√ßin hem dosyaya hem de konsola kaydedilir.

---

## ‚ú® √ñzellikler

- **üìä Veri √úretimi**: Ger√ßek√ßi hayati bulgular √ºretir:
  - Nabƒ±z: 60‚Äì100 bpm
  - Oksijen doygunluƒüu: 95‚Äì100%
  - Solunum hƒ±zƒ±: 12‚Äì20 bpm
  - Sƒ±caklƒ±k: 36‚Äì37.5¬∞C
  - EKG ritmi: √áe≈üitli t√ºrler (√∂rn. Normal Sin√ºs Ritmi, Atriyal Fibrilasyon)
- **üß† DeepSeek API Entegrasyonu**: Hayati bulgularƒ± tƒ±bbi analiz i√ßin g√∂nderir.
- **üíæ MySQL Depolama**: Verileri ve analiz sonu√ßlarƒ±nƒ± g√ºvenli bir ≈üekilde saklar.
- **üñ•Ô∏è Web Aray√ºz√º**: Verileri kullanƒ±cƒ± dostu bir tabloda g√∂sterir ve tablo silme i≈ülevi sunar.
- **ü§ñ Otomasyon**: `run_all.py` ile t√ºm bile≈üenleri kolayca ba≈ülatƒ±r.
- **üìú G√ºnl√ºk Kaydƒ±**: ƒ∞≈ülemleri ve hatalarƒ± rotasyonlu dosyalara kaydeder.
- **üõ°Ô∏è Hata Y√∂netimi**: API, veritabanƒ± ve web istekleri i√ßin saƒülam hata y√∂netimi.

---

## üì¶ Gereksinimler

Sistemi √ßalƒ±≈ütƒ±rmak i√ßin:

- **Python 3.6+**
- **MySQL veritabanƒ±**
- **DeepSeek API**, yerel olarak `http://localhost:11434/v1/chat/completions` adresinde √ßalƒ±≈ümalƒ±
- **Python K√ºt√ºphaneleri**:
  - `requests`
  - `mysql-connector-python`
  - `flask`
- **Yapƒ±landƒ±rma Dosyasƒ±**: A≈üaƒüƒ±daki yapƒ±ya sahip bir `config.py` dosyasƒ±:

  ```python
  DB_HOST = "your_host"       # √∂rn. "localhost"
  DB_USER = "your_user"       # √∂rn. "root"
  DB_PASSWORD = "your_password"
  DB_NAME = "health_data"
  DEBUG = True                # √úretim i√ßin False
  HOST = "0.0.0.0"            # Flask host
  PORT = 5000                 # Flask port
  ```

---

## üõ†Ô∏è Kurulum

Sistemi kurmak i√ßin ≈üu adƒ±mlarƒ± izleyin:

1. **Python Baƒüƒ±mlƒ±lƒ±klarƒ±nƒ± Y√ºkleyin** üì•

   Gerekli k√ºt√ºphaneleri pip ile y√ºkleyin:

   ```bash
   pip install requests mysql-connector-python flask
   ```

2. **MySQL Veritabanƒ±nƒ± Kurun** üóÑÔ∏è

   - MySQL sunucusuna bir istemciyle baƒülanƒ±n (√∂rn. MySQL Workbench, phpMyAdmin veya komut satƒ±rƒ±).
   - `health_data` veritabanƒ±nƒ± ve `patient_data` tablosunu olu≈üturmak i√ßin ≈üu SQL komutlarƒ±nƒ± √ßalƒ±≈ütƒ±rƒ±n:

     ```sql
     CREATE DATABASE IF NOT EXISTS health_data;
     USE health_data;
     CREATE TABLE IF NOT EXISTS patient_data (
         id INT AUTO_INCREMENT PRIMARY KEY,
         patient_id VARCHAR(10),
         time DATETIME,
         pulse_rate INT,
         oxygen_saturation FLOAT,
         respiration_rate INT,
         temperature FLOAT,
         ecg_rhythm VARCHAR(50),
         health_status TEXT,
         a0_value INT,
         current_bpm INT
     );
     ```

   - `config.py` dosyasƒ±ndaki kullanƒ±cƒ± i√ßin izinleri ayarlayƒ±n:

     ```sql
     GRANT ALL PRIVILEGES ON health_data.* TO 'your_user'@'localhost' IDENTIFIED BY 'your_password';
     FLUSH PRIVILEGES;
     ```

     `your_user` ve `your_password` deƒüerlerini `config.py` dosyanƒ±zdaki deƒüerlerle deƒüi≈ütirin.

   - `config.py` dosyasƒ±nƒ± veritabanƒ± kimlik bilgileri ve Flask ayarlarƒ±yla g√ºncelleyin, `DB_NAME` deƒüerinin `"health_data"` olduƒüundan emin olun.

3. **Ollama'yƒ± Y√ºkleyin** üñ•Ô∏è

   - Ollama'yƒ± [resmi web sitesinden](https://ollama.com/download) indirip y√ºkleyin.
   - **Windows**: Y√ºkleyiciyi √ßalƒ±≈ütƒ±rƒ±n ve talimatlarƒ± izleyin.
   - **macOS**: Homebrew ile y√ºkleyin (`brew install ollama`) veya y√ºkleyiciyi indirin.
   - **Linux**: Y√ºkleme betiƒüini √ßalƒ±≈ütƒ±rƒ±n:

     ```bash
     curl -fsSL https://ollama.com/install.sh | sh
     ```

   - Kurulumu doƒürulayƒ±n:

     ```bash
     ollama --version
     ```

4. **DeepSeek R1'i Kurun** ü§ñ

   - Ollama, 1.5B'den 671B parametreye kadar DeepSeek R1 modellerini destekler. Donanƒ±mƒ±nƒ±za uygun bir modeli √ßekin (`X` yerine `1.5b`, `7b`, `8b`, `14b`, `32b`, `70b` veya `671b` yazƒ±n):

     ```bash
     ollama pull deepseek-r1:Xb
     ```

     √ñrnek (7B modeli i√ßin):

     ```bash
     ollama pull deepseek-r1:7b
     ```

   - Ollama sunucusunu ba≈ülatƒ±n:

     ```bash
     ollama serve
     ```

     Bu, sunucuyu `http://localhost:11434` adresinde √ßalƒ±≈ütƒ±rƒ±r.

---

## üöÄ Kullanƒ±m

### 1. **T√ºm Sistemi √áalƒ±≈ütƒ±rƒ±n**

T√ºm bile≈üenleri tek komutla ba≈ülatmak i√ßin:

```bash
python run_all.py
```

Bu betik:
- Ollama sunucusunu ba≈ülatƒ±r (`http://localhost:11434`).
- `health_monitor.py` ile saƒülƒ±k verileri √ºretir ve i≈üler.
- `health_data_webui.py` ile web aray√ºz√ºn√º sunar.
- T√ºm i≈ülemleri durdurmak i√ßin `Ctrl+C` basƒ±n.

### 2. **Web Aray√ºz√ºne Eri≈üim** üåê

- Tarayƒ±cƒ±nƒ±zda `http://localhost:5000` adresine gidin (veya yapƒ±landƒ±rƒ±lmƒ±≈ü host/port).
- √ñzellikler:
  - Hasta verilerini bir tabloda g√∂r√ºnt√ºleme.
  - `patient_data` tablosunu silme (ana sayfaya y√∂nlendirir).

### 3. **Manuel √áalƒ±≈ütƒ±rma (ƒ∞steƒüe Baƒülƒ±)**

Bile≈üenleri ayrƒ± ayrƒ± √ßalƒ±≈ütƒ±rƒ±n:

- Ollama sunucusunu ba≈ülatƒ±n:

  ```bash
  ollama serve
  ```

- Veri √ºretme betiƒüini √ßalƒ±≈ütƒ±rƒ±n:

  ```bash
  python health_monitor.py
  ```

- Web aray√ºz√ºn√º √ßalƒ±≈ütƒ±rƒ±n:

  ```bash
  python health_data_webui.py
  ```

- Her i≈ülemi `Ctrl+C` ile durdurun.

---

## üìÇ Dosya Yapƒ±sƒ±

- **`health_monitor.py`**: Saƒülƒ±k verileri √ºretir, API analizi yapar ve sonu√ßlarƒ± kaydeder.
- **`health_data_webui.py`**: Verileri g√∂r√ºnt√ºlemek ve veritabanƒ±nƒ± y√∂netmek i√ßin web aray√ºz√º.
- **`run_all.py`**: T√ºm bile≈üenleri otomatikle≈ütirir.
- **`config.py`**: Veritabanƒ± ve Flask ayarlarƒ±.
- **`health_data.log`**: `health_monitor.py` i√ßin g√ºnl√ºkler (1MB, 5 yedek).
- **`app.log`**: `health_data_webui.py` i√ßin g√ºnl√ºkler (1MB, 5 yedek).
- **`templates/`**: Flask i√ßin HTML ≈üablonlarƒ± (`index.html`, `error.html`).

---

## üìú G√ºnl√ºk Kaydƒ±

- **`health_monitor.py` i√ßin**:
  - G√ºnl√ºkler `health_data.log` dosyasƒ±na kaydedilir (1MB, 5 yedek).
- **`health_data_webui.py` i√ßin**:
  - G√ºnl√ºkler `app.log` dosyasƒ±na kaydedilir (1MB, 5 yedek).
- G√ºnl√ºkler konsolda da ger√ßek zamanlƒ± g√∂sterilir.
- Format: `%(asctime)s - %(name)s - %(levelname)s - %(message)s`.

---

## üõ†Ô∏è Sorun Giderme

> **ƒ∞pucu**: Hata detaylarƒ± i√ßin `health_data.log` ve `app.log` dosyalarƒ±nƒ± kontrol edin.

- **Veritabanƒ± Hatalarƒ±**:
  - `config.py` kimlik bilgilerini doƒürulayƒ±n.
  - MySQL sunucusunun √ßalƒ±≈ütƒ±ƒüƒ±ndan ve `health_data` veritabanƒ± ile `patient_data` tablosunun mevcut olduƒüundan emin olun.
  - Yaygƒ±n hatalar:
    - `1045`: Yanlƒ±≈ü kullanƒ±cƒ± adƒ±/≈üifre.
    - `1049`: Veritabanƒ± mevcut deƒüil (`CREATE DATABASE` √ßalƒ±≈ütƒ±rƒ±n).
    - `1146`: Tablo mevcut deƒüil (`CREATE TABLE` √ßalƒ±≈ütƒ±rƒ±n).
- **API Hatalarƒ±**:
  - Ollama sunucusunun `http://localhost:11434` adresinde √ßalƒ±≈ütƒ±ƒüƒ±nƒ± kontrol edin.
  - DeepSeek R1 modelinin indirildiƒüini doƒürulayƒ±n (`ollama list`).
- **Web Aray√ºz√º Hatalarƒ±**:
  - Flask sunucusunun √ßalƒ±≈ütƒ±ƒüƒ±nƒ± kontrol edin (`run_all.py` veya `python health_data_webui.py`).
  - `config.py` host/port ayarlarƒ±nƒ± ve g√ºvenlik duvarƒ±nƒ± kontrol edin.
  - `templates/` dizininde `index.html` ve `error.html` dosyalarƒ±nƒ± doƒürulayƒ±n.
- **Ollama Sunucu Hatalarƒ±**:
  - 11434 portunun kullanƒ±mda olup olmadƒ±ƒüƒ±nƒ± kontrol edin:

    ```bash
    netstat -an | grep 11434
    ```

  - Ollama kurulumunu (`ollama --version`) ve model varlƒ±ƒüƒ±nƒ± doƒürulayƒ±n.

---

## ü§ù Katkƒ±da Bulunma

Katkƒ±larƒ±nƒ±zƒ± bekliyoruz! Katkƒ±da bulunmak i√ßin:

1. Depoyu √ßatallayƒ±n (fork).
2. √ñzellik dalƒ± olu≈üturun (`git checkout -b feature-name`).
3. Deƒüi≈üikliklerinizi kaydedin (`git